{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\4bul04kka\\\\lunaris\\\\restlun\\\\Project-for-TP\\\\Lunaris\\\\client\\\\src\\\\components\\\\pages\\\\postPage\\\\PostPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport PostService from \"../../../API/PostService\";\nimport { useFetching } from \"../../hooks/useFetching\";\nimport Loader from \"../../ui/loader/Loader\";\nimport \"./postPage.css\"; // Import the CSS\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PostPage = () => {\n  _s();\n  // const params = useParams();\n  const [post, setPost] = useState({});\n  const [images, setImages] = useState([]); // Now handling multiple images\n\n  // Fetching post by ID\n  const [fetchPostById, isLoading, postError] = useFetching(async id => {\n    const response = await PostService.getById(id);\n    setPost(response.data);\n  });\n\n  // Fetching multiple images (simulated or via API)\n  const [fetchImagesById, isImgLoading, imgError] = useFetching(async id => {\n    const response = await PostService.getImageById(id); // Simulated single image fetch\n    const repeatedImages = Array(4).fill(response.data); // Simulate multiple images (using the same one)\n    setImages(repeatedImages); // Set the repeated images into state\n  });\n  useEffect(() => {\n    fetchPostById(\"67154375f1e5c9c0aa50adc6\"); // Fetch the post\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"view-post\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"post-page\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"\\u0421\\u0442\\u0440\\u0430\\u043D\\u0438\\u0446\\u0430 \\u0441 \\u043D\\u043E\\u0432\\u043E\\u0441\\u0442\\u044C\\u044E ID = \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this), isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loader-container\",\n        children: /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post-content\",\n        children: [post.id, \". \", post.title, \". \", post.body]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this), postError && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-message\",\n        children: [\"Error: \", postError]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 23\n      }, this), isImgLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loader-container\",\n        children: /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post-images-container\",\n        children: images.length > 0 ? images.map((image, index) => /*#__PURE__*/_jsxDEV(\"img\", {\n          src: image.url,\n          alt: `Image ${index + 1}`,\n          className: \"post-image\",\n          loading: \"lazy\"\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 17\n        }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No images available\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this), imgError && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-message\",\n        children: [\"Error: \", imgError]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 22\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n_s(PostPage, \"rM0hqF3kliXcKRhNYwHwMw2u/Gg=\", false, function () {\n  return [useFetching, useFetching];\n});\n_c = PostPage;\nexport default PostPage;\nvar _c;\n$RefreshReg$(_c, \"PostPage\");","map":{"version":3,"names":["React","useEffect","useState","useParams","PostService","useFetching","Loader","jsxDEV","_jsxDEV","PostPage","_s","post","setPost","images","setImages","fetchPostById","isLoading","postError","id","response","getById","data","fetchImagesById","isImgLoading","imgError","getImageById","repeatedImages","Array","fill","className","children","fileName","_jsxFileName","lineNumber","columnNumber","title","body","length","map","image","index","src","url","alt","loading","_c","$RefreshReg$"],"sources":["C:/Users/4bul04kka/lunaris/restlun/Project-for-TP/Lunaris/client/src/components/pages/postPage/PostPage.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport PostService from \"../../../API/PostService\";\r\nimport { useFetching } from \"../../hooks/useFetching\";\r\nimport Loader from \"../../ui/loader/Loader\";\r\nimport \"./postPage.css\"; // Import the CSS\r\n\r\nconst PostPage = () => {\r\n  // const params = useParams();\r\n  const [post, setPost] = useState({});\r\n  const [images, setImages] = useState([]); // Now handling multiple images\r\n\r\n  // Fetching post by ID\r\n  const [fetchPostById, isLoading, postError] = useFetching(async (id) => {\r\n    const response = await PostService.getById(id);\r\n    setPost(response.data);\r\n  });\r\n\r\n  // Fetching multiple images (simulated or via API)\r\n  const [fetchImagesById, isImgLoading, imgError] = useFetching(async (id) => {\r\n    const response = await PostService.getImageById(id); // Simulated single image fetch\r\n    const repeatedImages = Array(4).fill(response.data); // Simulate multiple images (using the same one)\r\n    setImages(repeatedImages); // Set the repeated images into state\r\n  });\r\n\r\n  useEffect(() => {\r\n    fetchPostById(\"67154375f1e5c9c0aa50adc6\"); // Fetch the post\r\n  }, []);\r\n\r\n  return (\r\n    <div className='view-post'>\r\n      <div className='post-page'>\r\n        <h1>Страница с новостью ID = {}</h1>\r\n\r\n        {isLoading ? (\r\n          <div className='loader-container'>\r\n            <Loader />\r\n          </div>\r\n        ) : (\r\n          <div className='post-content'>\r\n            {post.id}. {post.title}. {post.body}\r\n          </div>\r\n        )}\r\n\r\n        {postError && <p className='error-message'>Error: {postError}</p>}\r\n\r\n        {isImgLoading ? (\r\n          <div className='loader-container'>\r\n            <Loader />\r\n          </div>\r\n        ) : (\r\n          <div className='post-images-container'>\r\n            {images.length > 0 ? (\r\n              images.map((image, index) => (\r\n                <img\r\n                  key={index}\r\n                  src={image.url}\r\n                  alt={`Image ${index + 1}`}\r\n                  className='post-image'\r\n                  loading='lazy'\r\n                />\r\n              ))\r\n            ) : (\r\n              <p>No images available</p>\r\n            )}\r\n          </div>\r\n        )}\r\n\r\n        {imgError && <p className='error-message'>Error: {imgError}</p>}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PostPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
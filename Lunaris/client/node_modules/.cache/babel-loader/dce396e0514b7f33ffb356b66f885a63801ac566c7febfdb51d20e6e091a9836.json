{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\4bul04kka\\\\lunaris\\\\restlun\\\\Project-for-TP\\\\Lunaris\\\\client\\\\src\\\\components\\\\pages\\\\events\\\\Events.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useContext } from \"react\";\nimport PostList from \"../../ui/postform/PostList\";\nimport PostForm from \"../../ui/postform/PostForm\";\nimport PostFilter from \"../../ui/postform/PostFilter\";\nimport MyModal from \"../../ui/modal/MyModal\";\nimport MyButton from \"../../ui/button/MyButton\";\nimport { usePosts } from \"../../hooks/usePosts\"; // Custom hook for searching and sorting posts\nimport PostService from \"../../../API/PostService\";\nimport Loader from \"../../ui/loader/Loader\";\nimport { useFetching } from \"../../hooks/useFetching\";\nimport { getPageCount } from \"../../../utils/pages\";\nimport Pagination from \"../../ui/pagination/Pagination\";\nimport { AuthContext } from \"../../../context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Events() {\n  _s();\n  const {\n    isAuth\n  } = useContext(AuthContext);\n  const [allPosts, setAllPosts] = useState([]); // All posts fetched from the server\n  const [filter, setFilter] = useState({\n    sort: \"\",\n    query: \"\"\n  }); // Sorting and searching filter\n  const [totalPages, setTotalPages] = useState(0); // Total pages for pagination\n  const [limit, setLimit] = useState(5); // Items per page limit\n  const [page, setPage] = useState(1); // Current page for pagination\n  const [modal, setModal] = useState(false); // State for handling modal visibility\n\n  // Fetching posts using a custom hook\n  const [fetchPosts, arePostsLoading, postError] = useFetching(async () => {\n    const response = await PostService.getAll();\n    setAllPosts(response.posts); // Store all posts fetched\n    setTotalPages(getPageCount(response.totalCount, limit)); // Set total pages based on all posts\n  });\n\n  // Call usePosts directly at the top level to filter and sort posts\n  const sortedAndSearchedPosts = usePosts(allPosts, filter.sort, filter.query);\n  useEffect(() => {\n    fetchPosts(); // Fetch posts once on mount\n  }, []);\n  useEffect(() => {\n    // Update total pages based on filtered and sorted posts\n    setTotalPages(getPageCount(sortedAndSearchedPosts.length, limit));\n    setPage(1); // Reset to page 1 after filtering\n  }, [filter, sortedAndSearchedPosts, limit]);\n  const createPost = async newPost => {\n    try {\n      await PostService.createPost(newPost); // Create the post\n      setModal(false); // Close modal after creating\n      fetchPosts(); // Fetch posts again to include the newly created post\n    } catch (error) {\n      console.error(\"Error creating post:\", error);\n    }\n  };\n  const removePost = async post => {\n    try {\n      await PostService.deletePost(post.id); // Delete the post via API\n      setAllPosts(allPosts.filter(p => p.id !== post.id)); // Remove the post from state\n    } catch (error) {\n      console.error(\"Ошибка при удалении поста:\", error);\n    }\n  };\n  const changePage = newPage => {\n    setPage(newPage);\n  };\n\n  // Paginate the sorted and searched posts\n  const paginatedPosts = sortedAndSearchedPosts.slice((page - 1) * limit, page * limit);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"events\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [isAuth && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(MyButton, {\n            onClick: fetchPosts,\n            children: \"\\u0417\\u0430\\u043F\\u0440\\u043E\\u0441\\u0438\\u0442\\u044C \\u043F\\u043E\\u0441\\u0442\\u044B\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(MyButton, {\n            onClick: () => setModal(true),\n            children: \"\\u0421\\u043E\\u0437\\u0434\\u0430\\u0442\\u044C \\u043D\\u043E\\u0432\\u043E\\u0441\\u0442\\u044C\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(MyModal, {\n            visible: modal,\n            setVisible: setModal,\n            children: /*#__PURE__*/_jsxDEV(PostForm, {\n              create: createPost\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(PostFilter, {\n          filter: filter,\n          setFilter: setFilter\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this), postError && /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\"\\u041F\\u0440\\u043E\\u0438\\u0437\\u043E\\u0448\\u043B\\u0430 \\u043E\\u0448\\u0438\\u0431\\u043A\\u0430 \", postError]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 25\n        }, this), arePostsLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading\",\n          children: /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(PostList, {\n          remove: removePost,\n          posts: paginatedPosts // Display the paginated posts\n          ,\n          title: \"Новости и мероприятия\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pag\",\n          children: /*#__PURE__*/_jsxDEV(Pagination, {\n            page: page,\n            changePage: changePage,\n            totalPages: totalPages // Adjust pagination based on filtered posts\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n}\n_s(Events, \"eF3ejbIGpTKyJiUmzpvAEXiAkaA=\", false, function () {\n  return [useFetching, usePosts];\n});\n_c = Events;\nexport default Events;\nvar _c;\n$RefreshReg$(_c, \"Events\");","map":{"version":3,"names":["React","useState","useEffect","useContext","PostList","PostForm","PostFilter","MyModal","MyButton","usePosts","PostService","Loader","useFetching","getPageCount","Pagination","AuthContext","jsxDEV","_jsxDEV","Events","_s","isAuth","allPosts","setAllPosts","filter","setFilter","sort","query","totalPages","setTotalPages","limit","setLimit","page","setPage","modal","setModal","fetchPosts","arePostsLoading","postError","response","getAll","posts","totalCount","sortedAndSearchedPosts","length","createPost","newPost","error","console","removePost","post","deletePost","id","p","changePage","newPage","paginatedPosts","slice","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","visible","setVisible","create","remove","title","_c","$RefreshReg$"],"sources":["C:/Users/4bul04kka/lunaris/restlun/Project-for-TP/Lunaris/client/src/components/pages/events/Events.jsx"],"sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\r\nimport PostList from \"../../ui/postform/PostList\";\r\nimport PostForm from \"../../ui/postform/PostForm\";\r\nimport PostFilter from \"../../ui/postform/PostFilter\";\r\nimport MyModal from \"../../ui/modal/MyModal\";\r\nimport MyButton from \"../../ui/button/MyButton\";\r\nimport { usePosts } from \"../../hooks/usePosts\"; // Custom hook for searching and sorting posts\r\nimport PostService from \"../../../API/PostService\";\r\nimport Loader from \"../../ui/loader/Loader\";\r\nimport { useFetching } from \"../../hooks/useFetching\";\r\nimport { getPageCount } from \"../../../utils/pages\";\r\nimport Pagination from \"../../ui/pagination/Pagination\";\r\nimport { AuthContext } from \"../../../context\";\r\n\r\nfunction Events() {\r\n  const { isAuth } = useContext(AuthContext);\r\n  const [allPosts, setAllPosts] = useState([]); // All posts fetched from the server\r\n  const [filter, setFilter] = useState({ sort: \"\", query: \"\" }); // Sorting and searching filter\r\n  const [totalPages, setTotalPages] = useState(0); // Total pages for pagination\r\n  const [limit, setLimit] = useState(5); // Items per page limit\r\n  const [page, setPage] = useState(1); // Current page for pagination\r\n  const [modal, setModal] = useState(false); // State for handling modal visibility\r\n\r\n  // Fetching posts using a custom hook\r\n  const [fetchPosts, arePostsLoading, postError] = useFetching(async () => {\r\n    const response = await PostService.getAll();\r\n    setAllPosts(response.posts); // Store all posts fetched\r\n    setTotalPages(getPageCount(response.totalCount, limit)); // Set total pages based on all posts\r\n  });\r\n\r\n  // Call usePosts directly at the top level to filter and sort posts\r\n  const sortedAndSearchedPosts = usePosts(allPosts, filter.sort, filter.query);\r\n\r\n  useEffect(() => {\r\n    fetchPosts(); // Fetch posts once on mount\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // Update total pages based on filtered and sorted posts\r\n    setTotalPages(getPageCount(sortedAndSearchedPosts.length, limit));\r\n    setPage(1); // Reset to page 1 after filtering\r\n  }, [filter, sortedAndSearchedPosts, limit]);\r\n\r\n  const createPost = async (newPost) => {\r\n    try {\r\n      await PostService.createPost(newPost); // Create the post\r\n      setModal(false); // Close modal after creating\r\n      fetchPosts(); // Fetch posts again to include the newly created post\r\n    } catch (error) {\r\n      console.error(\"Error creating post:\", error);\r\n    }\r\n  };\r\n\r\n  const removePost = async (post) => {\r\n    try {\r\n      await PostService.deletePost(post.id); // Delete the post via API\r\n      setAllPosts(allPosts.filter((p) => p.id !== post.id)); // Remove the post from state\r\n    } catch (error) {\r\n      console.error(\"Ошибка при удалении поста:\", error);\r\n    }\r\n  };\r\n\r\n  const changePage = (newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  // Paginate the sorted and searched posts\r\n  const paginatedPosts = sortedAndSearchedPosts.slice(\r\n    (page - 1) * limit,\r\n    page * limit\r\n  );\r\n\r\n  return (\r\n    <div className='events'>\r\n      <div className='container'>\r\n        <div>\r\n          {isAuth && (\r\n            <div>\r\n              <MyButton onClick={fetchPosts}>Запросить посты</MyButton>\r\n              <MyButton onClick={() => setModal(true)}>\r\n                Создать новость\r\n              </MyButton>\r\n              <MyModal visible={modal} setVisible={setModal}>\r\n                <PostForm create={createPost} />\r\n              </MyModal>\r\n            </div>\r\n          )}\r\n\r\n          <PostFilter filter={filter} setFilter={setFilter} />\r\n\r\n          {postError && <h1>Произошла ошибка {postError}</h1>}\r\n\r\n          {arePostsLoading ? (\r\n            <div className='loading'>\r\n              <Loader />\r\n            </div>\r\n          ) : (\r\n            <PostList\r\n              remove={removePost}\r\n              posts={paginatedPosts} // Display the paginated posts\r\n              title={\"Новости и мероприятия\"}\r\n            />\r\n          )}\r\n\r\n          <div className='pag'>\r\n            <Pagination\r\n              page={page}\r\n              changePage={changePage}\r\n              totalPages={totalPages} // Adjust pagination based on filtered posts\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Events;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
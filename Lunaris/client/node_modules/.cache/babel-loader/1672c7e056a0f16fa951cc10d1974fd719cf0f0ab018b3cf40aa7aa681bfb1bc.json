{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\4bul04kka\\\\lunaris\\\\fork\\\\Project-for-TP\\\\lunaris\\\\client\\\\src\\\\components\\\\pages\\\\postPage\\\\PostPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport PostService from \"../../../API/PostService\";\nimport { useFetching } from \"../../hooks/useFetching\";\nimport Loader from \"../../ui/loader/Loader\";\nimport \"./postPage.css\"; // Import the CSS\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PostPage = () => {\n  _s();\n  const params = useParams();\n  const [post, setPost] = useState({});\n  const [images, setImages] = useState([]); // Now handling multiple images\n\n  // Fetching post by ID\n  const [fetchPostById, isLoading, postError] = useFetching(async _id => {\n    const response = await PostService.getById(_id);\n    setPost(response.data);\n  });\n\n  // Fetching multiple images (simulated or via API)\n  const [fetchImagesById, isImgLoading, imgError] = useFetching(async id => {\n    const response = await PostService.getImageById(id); // Simulated single image fetch\n    const repeatedImages = Array(4).fill(response.data); // Simulate multiple images (using the same one)\n    setImages(repeatedImages); // Set the repeated images into state\n  });\n  useEffect(() => {\n    fetchPostById(params.id); // Fetch the post\n    fetchImagesById(params.id); // Fetch multiple images (simulated)\n  }, [params.id]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"view-post\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"post-page\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"\\u0421\\u0442\\u0440\\u0430\\u043D\\u0438\\u0446\\u0430 \\u0441 \\u043D\\u043E\\u0432\\u043E\\u0441\\u0442\\u044C\\u044E ID = \", params.id]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loader-container\",\n        children: /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post-content\",\n        children: [post.id, \". \", post.title, \". \", post.body]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }, this), postError && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-message\",\n        children: [\"Error: \", postError]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 23\n      }, this), isImgLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loader-container\",\n        children: /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post-images-container\",\n        children: images.length > 0 ? images.map((image, index) => /*#__PURE__*/_jsxDEV(\"img\", {\n          src: image.url,\n          alt: `Image ${index + 1}`,\n          className: \"post-image\",\n          loading: \"lazy\"\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 17\n        }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No images available\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this), imgError && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-message\",\n        children: [\"Error: \", imgError]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 22\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n_s(PostPage, \"1xWgYIO/SoEGe2EVIappOUZM2vc=\", false, function () {\n  return [useParams, useFetching, useFetching];\n});\n_c = PostPage;\nexport default PostPage;\nvar _c;\n$RefreshReg$(_c, \"PostPage\");","map":{"version":3,"names":["React","useEffect","useState","useParams","PostService","useFetching","Loader","jsxDEV","_jsxDEV","PostPage","_s","params","post","setPost","images","setImages","fetchPostById","isLoading","postError","_id","response","getById","data","fetchImagesById","isImgLoading","imgError","id","getImageById","repeatedImages","Array","fill","className","children","fileName","_jsxFileName","lineNumber","columnNumber","title","body","length","map","image","index","src","url","alt","loading","_c","$RefreshReg$"],"sources":["C:/Users/4bul04kka/lunaris/fork/Project-for-TP/lunaris/client/src/components/pages/postPage/PostPage.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport PostService from \"../../../API/PostService\";\r\nimport { useFetching } from \"../../hooks/useFetching\";\r\nimport Loader from \"../../ui/loader/Loader\";\r\nimport \"./postPage.css\"; // Import the CSS\r\n\r\nconst PostPage = () => {\r\n  const params = useParams();\r\n  const [post, setPost] = useState({});\r\n  const [images, setImages] = useState([]); // Now handling multiple images\r\n\r\n  // Fetching post by ID\r\n  const [fetchPostById, isLoading, postError] = useFetching(async (_id) => {\r\n    const response = await PostService.getById(_id);\r\n    setPost(response.data);\r\n  });\r\n\r\n  // Fetching multiple images (simulated or via API)\r\n  const [fetchImagesById, isImgLoading, imgError] = useFetching(async (id) => {\r\n    const response = await PostService.getImageById(id); // Simulated single image fetch\r\n    const repeatedImages = Array(4).fill(response.data); // Simulate multiple images (using the same one)\r\n    setImages(repeatedImages); // Set the repeated images into state\r\n  });\r\n\r\n  useEffect(() => {\r\n    fetchPostById(params.id); // Fetch the post\r\n    fetchImagesById(params.id); // Fetch multiple images (simulated)\r\n  }, [params.id]);\r\n\r\n  return (\r\n    <div className='view-post'>\r\n      <div className='post-page'>\r\n        <h1>Страница с новостью ID = {params.id}</h1>\r\n\r\n        {isLoading ? (\r\n          <div className='loader-container'>\r\n            <Loader />\r\n          </div>\r\n        ) : (\r\n          <div className='post-content'>\r\n            {post.id}. {post.title}. {post.body}\r\n          </div>\r\n        )}\r\n\r\n        {postError && <p className='error-message'>Error: {postError}</p>}\r\n\r\n        {isImgLoading ? (\r\n          <div className='loader-container'>\r\n            <Loader />\r\n          </div>\r\n        ) : (\r\n          <div className='post-images-container'>\r\n            {images.length > 0 ? (\r\n              images.map((image, index) => (\r\n                <img\r\n                  key={index}\r\n                  src={image.url}\r\n                  alt={`Image ${index + 1}`}\r\n                  className='post-image'\r\n                  loading='lazy'\r\n                />\r\n              ))\r\n            ) : (\r\n              <p>No images available</p>\r\n            )}\r\n          </div>\r\n        )}\r\n\r\n        {imgError && <p className='error-message'>Error: {imgError}</p>}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PostPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
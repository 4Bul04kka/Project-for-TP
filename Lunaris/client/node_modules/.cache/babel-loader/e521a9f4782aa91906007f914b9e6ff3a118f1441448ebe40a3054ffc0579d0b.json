{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\4bul04kka\\\\lunaris\\\\client\\\\src\\\\components\\\\pages\\\\postPage\\\\PostPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport PostService from \"../../../API/PostService\";\nimport { useFetching } from \"../../hooks/useFetching\";\nimport Loader from \"../../ui/loader/Loader\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PostPage = () => {\n  _s();\n  const params = useParams();\n  const [post, setPost] = useState({});\n  const [images, setImages] = useState({}); // Set to an object in case response contains multiple image properties\n\n  const [fetchPostById, isLoading, error] = useFetching(async id => {\n    const response = await PostService.getById(id);\n    setPost(response.data);\n  });\n  const [fetchImgsById, isImgLoading, imgError] = useFetching(async id => {\n    const response = await PostService.getImageById(id);\n    setImages(response.data); // Assuming response.data contains an object with image URL\n  });\n  useEffect(() => {\n    fetchPostById(params.id);\n    fetchImgsById(params.id);\n  }, [params.id, fetchPostById, fetchImgsById]); // Added params.id as dependency\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"\\u0421\\u0442\\u0440\\u0430\\u043D\\u0438\\u0446\\u0430 \\u0441 \\u043D\\u043E\\u0432\\u043E\\u0441\\u0442\\u044C\\u044E ID = \", params.id]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), isLoading ? /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [post.id, \". \", post.title, \". \", post.body]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 17\n    }, this), isImgLoading ? /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: images.url ? /*#__PURE__*/_jsxDEV(\"img\", {\n        src: images.url,\n        alt: post.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No image available\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this), imgError && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Error: \", imgError]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 20\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n_s(PostPage, \"w9mTQbDO/bwI2iJiDONHgtOU+Hs=\", false, function () {\n  return [useParams, useFetching, useFetching];\n});\n_c = PostPage;\nexport default PostPage;\nvar _c;\n$RefreshReg$(_c, \"PostPage\");","map":{"version":3,"names":["React","useEffect","useState","useParams","PostService","useFetching","Loader","jsxDEV","_jsxDEV","PostPage","_s","params","post","setPost","images","setImages","fetchPostById","isLoading","error","id","response","getById","data","fetchImgsById","isImgLoading","imgError","getImageById","children","fileName","_jsxFileName","lineNumber","columnNumber","title","body","url","src","alt","_c","$RefreshReg$"],"sources":["C:/Users/4bul04kka/lunaris/client/src/components/pages/postPage/PostPage.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport PostService from \"../../../API/PostService\";\r\nimport { useFetching } from \"../../hooks/useFetching\";\r\nimport Loader from \"../../ui/loader/Loader\";\r\n\r\nconst PostPage = () => {\r\n  const params = useParams();\r\n  const [post, setPost] = useState({});\r\n  const [images, setImages] = useState({}); // Set to an object in case response contains multiple image properties\r\n\r\n  const [fetchPostById, isLoading, error] = useFetching(async (id) => {\r\n    const response = await PostService.getById(id);\r\n    setPost(response.data);\r\n  });\r\n\r\n  const [fetchImgsById, isImgLoading, imgError] = useFetching(async (id) => {\r\n    const response = await PostService.getImageById(id);\r\n    setImages(response.data); // Assuming response.data contains an object with image URL\r\n  });\r\n\r\n  useEffect(() => {\r\n    fetchPostById(params.id);\r\n    fetchImgsById(params.id);\r\n  }, [params.id, fetchPostById, fetchImgsById]); // Added params.id as dependency\r\n\r\n  return (\r\n    <div>\r\n      <h1>Страница с новостью ID = {params.id}</h1>\r\n      {isLoading ? (\r\n        <Loader />\r\n      ) : (\r\n        <div>\r\n          {post.id}. {post.title}. {post.body}\r\n        </div>\r\n      )}\r\n      {error && <p>Error: {error}</p>}\r\n\r\n      {isImgLoading ? (\r\n        <Loader />\r\n      ) : (\r\n        <div>\r\n          {images.url ? (\r\n            <img src={images.url} alt={post.title} />\r\n          ) : (\r\n            <p>No image available</p>\r\n          )}\r\n        </div>\r\n      )}\r\n      {imgError && <p>Error: {imgError}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PostPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
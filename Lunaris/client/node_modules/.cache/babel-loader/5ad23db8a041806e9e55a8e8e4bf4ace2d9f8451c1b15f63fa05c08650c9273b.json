{"ast":null,"code":"import axios from \"axios\";\nexport default class PostService {\n  static async getAll(limit = 5, page = 1) {\n    try {\n      const response = await axios.get(\"http://localhost:3001/api/posts\", {\n        params: {\n          _limit: limit,\n          _page: page,\n          _sort: \"id\",\n          _order: \"desc\"\n        }\n      });\n      const {\n        posts,\n        totalCount,\n        currentPage,\n        totalPages\n      } = response.data;\n      console.log(\"Общее количество постов:\", totalCount);\n      console.log(\"Текущая страница:\", currentPage);\n      console.log(\"Общее количество страниц:\", totalPages);\n      return posts;\n    } catch (error) {\n      var _error$response;\n      console.error(\"Ошибка при получении постов:\", ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n      throw error;\n    }\n  }\n  static async getById(id) {\n    console.log(`Запрос на получение поста с ID: ${id}`);\n    try {\n      const response = await axios.get(`http://localhost:3001/api/posts/${id}`);\n      console.log(\"Ответ от API на получение поста:\", response.data);\n      return response.data;\n    } catch (error) {\n      var _error$response2;\n      console.error(`Ошибка при получении поста с ID ${id}:`, ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error.message);\n      throw error;\n    }\n  }\n  static async createPost(postData) {\n    console.log(\"Создание поста с данными:\", postData);\n    const response = await axios.post(\"http://localhost:3001/api/posts\", postData);\n    console.log(\"Ответ от API на создание поста:\", response.data);\n    return response.data;\n  }\n}","map":{"version":3,"names":["axios","PostService","getAll","limit","page","response","get","params","_limit","_page","_sort","_order","posts","totalCount","currentPage","totalPages","data","console","log","error","_error$response","message","getById","id","_error$response2","createPost","postData","post"],"sources":["C:/Users/4bul04kka/lunaris/restlun/Project-for-TP/Lunaris/client/src/API/PostService.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nexport default class PostService {\r\n  static async getAll(limit = 5, page = 1) {\r\n    try {\r\n      const response = await axios.get(\"http://localhost:3001/api/posts\", {\r\n        params: {\r\n          _limit: limit,\r\n          _page: page,\r\n          _sort: \"id\",\r\n          _order: \"desc\",\r\n        },\r\n      });\r\n\r\n      const { posts, totalCount, currentPage, totalPages } = response.data;\r\n\r\n      console.log(\"Общее количество постов:\", totalCount);\r\n      console.log(\"Текущая страница:\", currentPage);\r\n      console.log(\"Общее количество страниц:\", totalPages);\r\n\r\n      return posts;\r\n    } catch (error) {\r\n      console.error(\r\n        \"Ошибка при получении постов:\",\r\n        error.response?.data || error.message\r\n      );\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  static async getById(id) {\r\n    console.log(`Запрос на получение поста с ID: ${id}`);\r\n\r\n    try {\r\n      const response = await axios.get(`http://localhost:3001/api/posts/${id}`);\r\n      console.log(\"Ответ от API на получение поста:\", response.data);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(\r\n        `Ошибка при получении поста с ID ${id}:`,\r\n        error.response?.data || error.message\r\n      );\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  static async createPost(postData) {\r\n    console.log(\"Создание поста с данными:\", postData);\r\n\r\n    const response = await axios.post(\r\n      \"http://localhost:3001/api/posts\",\r\n      postData\r\n    );\r\n    console.log(\"Ответ от API на создание поста:\", response.data);\r\n    return response.data;\r\n  }\r\n}\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,eAAe,MAAMC,WAAW,CAAC;EAC/B,aAAaC,MAAMA,CAACC,KAAK,GAAG,CAAC,EAAEC,IAAI,GAAG,CAAC,EAAE;IACvC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAML,KAAK,CAACM,GAAG,CAAC,iCAAiC,EAAE;QAClEC,MAAM,EAAE;UACNC,MAAM,EAAEL,KAAK;UACbM,KAAK,EAAEL,IAAI;UACXM,KAAK,EAAE,IAAI;UACXC,MAAM,EAAE;QACV;MACF,CAAC,CAAC;MAEF,MAAM;QAAEC,KAAK;QAAEC,UAAU;QAAEC,WAAW;QAAEC;MAAW,CAAC,GAAGV,QAAQ,CAACW,IAAI;MAEpEC,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEL,UAAU,CAAC;MACnDI,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEJ,WAAW,CAAC;MAC7CG,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEH,UAAU,CAAC;MAEpD,OAAOH,KAAK;IACd,CAAC,CAAC,OAAOO,KAAK,EAAE;MAAA,IAAAC,eAAA;MACdH,OAAO,CAACE,KAAK,CACX,8BAA8B,EAC9B,EAAAC,eAAA,GAAAD,KAAK,CAACd,QAAQ,cAAAe,eAAA,uBAAdA,eAAA,CAAgBJ,IAAI,KAAIG,KAAK,CAACE,OAChC,CAAC;MACD,MAAMF,KAAK;IACb;EACF;EAEA,aAAaG,OAAOA,CAACC,EAAE,EAAE;IACvBN,OAAO,CAACC,GAAG,CAAC,mCAAmCK,EAAE,EAAE,CAAC;IAEpD,IAAI;MACF,MAAMlB,QAAQ,GAAG,MAAML,KAAK,CAACM,GAAG,CAAC,mCAAmCiB,EAAE,EAAE,CAAC;MACzEN,OAAO,CAACC,GAAG,CAAC,kCAAkC,EAAEb,QAAQ,CAACW,IAAI,CAAC;MAC9D,OAAOX,QAAQ,CAACW,IAAI;IACtB,CAAC,CAAC,OAAOG,KAAK,EAAE;MAAA,IAAAK,gBAAA;MACdP,OAAO,CAACE,KAAK,CACX,mCAAmCI,EAAE,GAAG,EACxC,EAAAC,gBAAA,GAAAL,KAAK,CAACd,QAAQ,cAAAmB,gBAAA,uBAAdA,gBAAA,CAAgBR,IAAI,KAAIG,KAAK,CAACE,OAChC,CAAC;MACD,MAAMF,KAAK;IACb;EACF;EAEA,aAAaM,UAAUA,CAACC,QAAQ,EAAE;IAChCT,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEQ,QAAQ,CAAC;IAElD,MAAMrB,QAAQ,GAAG,MAAML,KAAK,CAAC2B,IAAI,CAC/B,iCAAiC,EACjCD,QACF,CAAC;IACDT,OAAO,CAACC,GAAG,CAAC,iCAAiC,EAAEb,QAAQ,CAACW,IAAI,CAAC;IAC7D,OAAOX,QAAQ,CAACW,IAAI;EACtB;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
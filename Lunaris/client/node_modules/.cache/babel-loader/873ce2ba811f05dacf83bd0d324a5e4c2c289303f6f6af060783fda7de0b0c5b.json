{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\4bul04kka\\\\lunaris\\\\client\\\\src\\\\components\\\\pages\\\\postPage\\\\PostPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport PostService from \"../../../API/PostService\";\nimport { useFetching } from \"../../hooks/useFetching\";\nimport Loader from \"../../ui/loader/Loader\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PostPage = () => {\n  _s();\n  const params = useParams();\n  const [post, setPost] = useState({});\n  const [image, setImage] = useState({}); // Set to an object in case response contains multiple image properties\n\n  // Fetching post by ID\n  const [fetchPostById, isLoading, postError] = useFetching(async id => {\n    const response = await PostService.getById(id);\n    setPost(response.data);\n  });\n\n  // Fetching image by ID (simulated or independent fetch)\n  const [fetchImageById, isImgLoading, imgError] = useFetching(async id => {\n    const response = await PostService.getImageById(id); // Get the image by ID\n    setImage(response.data); // Assuming response.data contains an object with the image URL\n  });\n  useEffect(() => {\n    fetchPostById(params.id); // Fetch the post\n    fetchImageById(params.id); // Fetch a related image, even though this may not match directly\n  }, [params.id]); // Ensure useEffect runs when params.id changes\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"\\u0421\\u0442\\u0440\\u0430\\u043D\\u0438\\u0446\\u0430 \\u0441 \\u043D\\u043E\\u0432\\u043E\\u0441\\u0442\\u044C\\u044E ID = \", params.id]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), isLoading ? /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [post.id, \". \", post.title, \". \", post.body]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this), postError && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Error: \", postError]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 21\n    }, this), isImgLoading ? /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: image.url ? /*#__PURE__*/_jsxDEV(\"img\", {\n        src: image.url,\n        alt: post.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No image available\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, this), imgError && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Error: \", imgError]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 20\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n_s(PostPage, \"bo+nKzfJWXqvS6lYR5hVEF02aTg=\", false, function () {\n  return [useParams, useFetching, useFetching];\n});\n_c = PostPage;\nexport default PostPage;\nvar _c;\n$RefreshReg$(_c, \"PostPage\");","map":{"version":3,"names":["React","useEffect","useState","useParams","PostService","useFetching","Loader","jsxDEV","_jsxDEV","PostPage","_s","params","post","setPost","image","setImage","fetchPostById","isLoading","postError","id","response","getById","data","fetchImageById","isImgLoading","imgError","getImageById","children","fileName","_jsxFileName","lineNumber","columnNumber","title","body","url","src","alt","_c","$RefreshReg$"],"sources":["C:/Users/4bul04kka/lunaris/client/src/components/pages/postPage/PostPage.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport PostService from \"../../../API/PostService\";\r\nimport { useFetching } from \"../../hooks/useFetching\";\r\nimport Loader from \"../../ui/loader/Loader\";\r\n\r\nconst PostPage = () => {\r\n  const params = useParams();\r\n  const [post, setPost] = useState({});\r\n  const [image, setImage] = useState({}); // Set to an object in case response contains multiple image properties\r\n\r\n  // Fetching post by ID\r\n  const [fetchPostById, isLoading, postError] = useFetching(async (id) => {\r\n    const response = await PostService.getById(id);\r\n    setPost(response.data);\r\n  });\r\n\r\n  // Fetching image by ID (simulated or independent fetch)\r\n  const [fetchImageById, isImgLoading, imgError] = useFetching(async (id) => {\r\n    const response = await PostService.getImageById(id); // Get the image by ID\r\n    setImage(response.data); // Assuming response.data contains an object with the image URL\r\n  });\r\n\r\n  useEffect(() => {\r\n    fetchPostById(params.id); // Fetch the post\r\n    fetchImageById(params.id); // Fetch a related image, even though this may not match directly\r\n  }, [params.id]); // Ensure useEffect runs when params.id changes\r\n\r\n  return (\r\n    <div>\r\n      <h1>Страница с новостью ID = {params.id}</h1>\r\n      {isLoading ? (\r\n        <Loader />\r\n      ) : (\r\n        <div>\r\n          {post.id}. {post.title}. {post.body}\r\n        </div>\r\n      )}\r\n      {postError && <p>Error: {postError}</p>}\r\n\r\n      {isImgLoading ? (\r\n        <Loader />\r\n      ) : (\r\n        <div>\r\n          {image.url ? (\r\n            <img src={image.url} alt={post.title} />\r\n          ) : (\r\n            <p>No image available</p>\r\n          )}\r\n        </div>\r\n      )}\r\n      {imgError && <p>Error: {imgError}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PostPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
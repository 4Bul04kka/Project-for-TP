{"ast":null,"code":"import axios from \"axios\";\nexport default class PostService {\n  static async getAll(limit = 5, page = 1) {\n    try {\n      const response = await axios.get(\"http://localhost:3001/api/posts\", {\n        params: {\n          _limit: limit,\n          _page: page,\n          _sort: \"id\",\n          _order: \"desc\"\n        }\n      });\n      const {\n        posts,\n        totalCount,\n        currentPage,\n        totalPages\n      } = response.data;\n      return response.data;\n    } catch (error) {\n      var _error$response;\n      console.error(\"Ошибка при получении постов:\", ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n      throw error;\n    }\n  }\n  static async getById(id) {\n    console.log(`Запрос на получение поста с ID: ${id}`);\n    try {\n      const response = await axios.get(`http://localhost:3001/api/posts/${id}`);\n      console.log(\"Ответ от API на получение поста:\", response.data);\n      return response.data;\n    } catch (error) {\n      var _error$response2;\n      console.error(`Ошибка при получении поста с ID ${id}:`, ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error.message);\n      throw error;\n    }\n  }\n  static async createPost(postData) {\n    console.log(\"Создание поста с данными:\", postData);\n    try {\n      const response = await axios.post(\"http://localhost:3001/api/posts\", postData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\"\n        }\n      });\n      console.log(\"Ответ от API на создание поста:\", response.data);\n      return response.data;\n    } catch (error) {\n      var _error$response3;\n      console.error(\"Ошибка при создании поста:\", ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || error.message);\n      throw error;\n    }\n  }\n  static async updatePost(id, postData) {\n    console.log(`Обновление поста с ID: ${id} и данными:`, postData);\n    try {\n      const response = await axios.put(`http://localhost:3001/api/posts/${id}`, postData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\"\n        }\n      });\n      console.log(\"Ответ от API на обновление поста:\", response.data);\n      return response.data;\n    } catch (error) {\n      var _error$response4;\n      console.error(`Ошибка при обновлении поста с ID ${id}:`, ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data) || error.message);\n      throw error;\n    }\n  }\n  static async deletePost(id) {\n    console.log(`Запрос на удаление поста с ID: ${id}`);\n    try {\n      const response = await axios.delete(`http://localhost:3001/api/posts/${id}`);\n      console.log(\"Ответ от API на удаление поста:\", response.data);\n      return response.data;\n    } catch (error) {\n      var _error$response5;\n      console.error(`Ошибка при удалении поста с ID ${id}:`, ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.data) || error.message);\n      throw error;\n    }\n  }\n}","map":{"version":3,"names":["axios","PostService","getAll","limit","page","response","get","params","_limit","_page","_sort","_order","posts","totalCount","currentPage","totalPages","data","error","_error$response","console","message","getById","id","log","_error$response2","createPost","postData","post","headers","_error$response3","updatePost","put","_error$response4","deletePost","delete","_error$response5"],"sources":["C:/Users/4bul04kka/lunaris/restlun/Project-for-TP/Lunaris/client/src/API/PostService.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nexport default class PostService {\r\n  static async getAll(limit = 5, page = 1) {\r\n    try {\r\n      const response = await axios.get(\"http://localhost:3001/api/posts\", {\r\n        params: {\r\n          _limit: limit,\r\n          _page: page,\r\n          _sort: \"id\",\r\n          _order: \"desc\",\r\n        },\r\n      });\r\n\r\n      const { posts, totalCount, currentPage, totalPages } = response.data;\r\n\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(\r\n        \"Ошибка при получении постов:\",\r\n        error.response?.data || error.message\r\n      );\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  static async getById(id) {\r\n    console.log(`Запрос на получение поста с ID: ${id}`);\r\n\r\n    try {\r\n      const response = await axios.get(`http://localhost:3001/api/posts/${id}`);\r\n      console.log(\"Ответ от API на получение поста:\", response.data);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(\r\n        `Ошибка при получении поста с ID ${id}:`,\r\n        error.response?.data || error.message\r\n      );\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  static async createPost(postData) {\r\n    console.log(\"Создание поста с данными:\", postData);\r\n\r\n    try {\r\n      const response = await axios.post(\r\n        \"http://localhost:3001/api/posts\",\r\n        postData,\r\n        {\r\n          headers: {\r\n            \"Content-Type\": \"multipart/form-data\",\r\n          },\r\n        }\r\n      );\r\n      console.log(\"Ответ от API на создание поста:\", response.data);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(\r\n        \"Ошибка при создании поста:\",\r\n        error.response?.data || error.message\r\n      );\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  static async updatePost(id, postData) {\r\n    console.log(`Обновление поста с ID: ${id} и данными:`, postData);\r\n\r\n    try {\r\n      const response = await axios.put(\r\n        `http://localhost:3001/api/posts/${id}`,\r\n        postData,\r\n        {\r\n          headers: {\r\n            \"Content-Type\": \"multipart/form-data\",\r\n          },\r\n        }\r\n      );\r\n      console.log(\"Ответ от API на обновление поста:\", response.data);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(\r\n        `Ошибка при обновлении поста с ID ${id}:`,\r\n        error.response?.data || error.message\r\n      );\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  static async deletePost(id) {\r\n    console.log(`Запрос на удаление поста с ID: ${id}`);\r\n\r\n    try {\r\n      const response = await axios.delete(\r\n        `http://localhost:3001/api/posts/${id}`\r\n      );\r\n      console.log(\"Ответ от API на удаление поста:\", response.data);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(\r\n        `Ошибка при удалении поста с ID ${id}:`,\r\n        error.response?.data || error.message\r\n      );\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
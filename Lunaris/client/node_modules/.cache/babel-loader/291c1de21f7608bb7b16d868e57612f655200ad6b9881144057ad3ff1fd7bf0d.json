{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\4bul04kka\\\\lunaris\\\\client\\\\src\\\\components\\\\pages\\\\postPage\\\\PostPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport PostService from \"../../../API/PostService\";\nimport { useFetching } from \"../../hooks/useFetching\";\nimport Loader from \"../../ui/loader/Loader\";\nimport \"./postPage.css\"; // Import the CSS\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PostPage = () => {\n  _s();\n  const params = useParams();\n  const [post, setPost] = useState({});\n  const [images, setImages] = useState([]); // Now handling multiple images\n\n  // Fetching post by ID\n  const [fetchPostById, isLoading, postError] = useFetching(async id => {\n    const response = await PostService.getById(id);\n    setPost(response.data);\n  });\n\n  // Fetching multiple images (simulated or via API)\n  const [fetchImagesById, isImgLoading, imgError] = useFetching(async id => {\n    const response = await PostService.getImageById(id); // Simulated single image fetch\n    const repeatedImages = Array(4).fill(response.data); // Simulate multiple images (using the same one)\n    setImages(repeatedImages); // Set the repeated images into state\n  });\n  useEffect(() => {\n    fetchPostById(params.id); // Fetch the post\n    fetchImagesById(params.id); // Fetch multiple images (simulated)\n  }, [params.id]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"post-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"\\u0421\\u0442\\u0440\\u0430\\u043D\\u0438\\u0446\\u0430 \\u0441 \\u043D\\u043E\\u0432\\u043E\\u0441\\u0442\\u044C\\u044E ID = \", params.id]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loader-container\",\n      children: /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"post-content\",\n      children: [post.id, \". \", post.title, \". \", post.body]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this), postError && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-message\",\n      children: [\"Error: \", postError]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 21\n    }, this), isImgLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loader-container\",\n      children: /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"post-images-container\",\n      children: images.length > 0 ? images.map((image, index) => /*#__PURE__*/_jsxDEV(\"img\", {\n        src: image.url,\n        alt: `Image ${index + 1}`,\n        className: \"post-image\",\n        loading: \"lazy\"\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 15\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No images available\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this), imgError && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-message\",\n      children: [\"Error: \", imgError]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 20\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n_s(PostPage, \"1xWgYIO/SoEGe2EVIappOUZM2vc=\", false, function () {\n  return [useParams, useFetching, useFetching];\n});\n_c = PostPage;\nexport default PostPage;\nvar _c;\n$RefreshReg$(_c, \"PostPage\");","map":{"version":3,"names":["React","useEffect","useState","useParams","PostService","useFetching","Loader","jsxDEV","_jsxDEV","PostPage","_s","params","post","setPost","images","setImages","fetchPostById","isLoading","postError","id","response","getById","data","fetchImagesById","isImgLoading","imgError","getImageById","repeatedImages","Array","fill","className","children","fileName","_jsxFileName","lineNumber","columnNumber","title","body","length","map","image","index","src","url","alt","loading","_c","$RefreshReg$"],"sources":["C:/Users/4bul04kka/lunaris/client/src/components/pages/postPage/PostPage.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport PostService from \"../../../API/PostService\";\r\nimport { useFetching } from \"../../hooks/useFetching\";\r\nimport Loader from \"../../ui/loader/Loader\";\r\nimport \"./postPage.css\"; // Import the CSS\r\n\r\nconst PostPage = () => {\r\n  const params = useParams();\r\n  const [post, setPost] = useState({});\r\n  const [images, setImages] = useState([]); // Now handling multiple images\r\n\r\n  // Fetching post by ID\r\n  const [fetchPostById, isLoading, postError] = useFetching(async (id) => {\r\n    const response = await PostService.getById(id);\r\n    setPost(response.data);\r\n  });\r\n\r\n  // Fetching multiple images (simulated or via API)\r\n  const [fetchImagesById, isImgLoading, imgError] = useFetching(async (id) => {\r\n    const response = await PostService.getImageById(id); // Simulated single image fetch\r\n    const repeatedImages = Array(4).fill(response.data); // Simulate multiple images (using the same one)\r\n    setImages(repeatedImages); // Set the repeated images into state\r\n  });\r\n\r\n  useEffect(() => {\r\n    fetchPostById(params.id); // Fetch the post\r\n    fetchImagesById(params.id); // Fetch multiple images (simulated)\r\n  }, [params.id]);\r\n\r\n  return (\r\n    <div className='post-page'>\r\n      <h1>Страница с новостью ID = {params.id}</h1>\r\n\r\n      {isLoading ? (\r\n        <div className='loader-container'>\r\n          <Loader />\r\n        </div>\r\n      ) : (\r\n        <div className='post-content'>\r\n          {post.id}. {post.title}. {post.body}\r\n        </div>\r\n      )}\r\n\r\n      {postError && <p className='error-message'>Error: {postError}</p>}\r\n\r\n      {isImgLoading ? (\r\n        <div className='loader-container'>\r\n          <Loader />\r\n        </div>\r\n      ) : (\r\n        <div className='post-images-container'>\r\n          {images.length > 0 ? (\r\n            images.map((image, index) => (\r\n              <img\r\n                key={index}\r\n                src={image.url}\r\n                alt={`Image ${index + 1}`}\r\n                className='post-image'\r\n                loading='lazy'\r\n              />\r\n            ))\r\n          ) : (\r\n            <p>No images available</p>\r\n          )}\r\n        </div>\r\n      )}\r\n\r\n      {imgError && <p className='error-message'>Error: {imgError}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PostPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}